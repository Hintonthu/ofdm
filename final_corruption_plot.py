from pylab import *
import seaborn as sns
sns.set_context("paper")
sns.set_style("white")
corruption_space = np.arange(0,-6,-1)

figure()

err1 = np.loadtxt("./result/OFDM_BER_trained_at_0dB SNR_L4_64_temp_temp")
err2 = np.loadtxt("./result/OFDM_BER_trained_at_1dB SNR_L4_64_temp_temp")
err3 = np.loadtxt("./result/OFDM_BER_trained_at_2dB SNR_L4_64_temp_temp")
err4 = np.loadtxt("./result/OFDM_BER_trained_at_3dB SNR_L4_64_temp_temp")
err5 = np.loadtxt("./result/OFDM_BER_trained_at_4dB SNR_L4_64_temp_temp")
err6 = np.loadtxt("./result/OFDM_BER_trained_at_5dB SNR_L4_64_temp_temp")
print err1
# semilogy(lin_space, err1 ,color='r',  marker="o", markersize=5,linewidth=2, label="SER_trained_at_0dB SNR")
# semilogy(lin_space, err2 ,color='g',  marker="o", markersize=5,linewidth=2,label="SER_trained_at_5dB SNR")
#semilogy(lin_space, err3 ,color='b',  marker="o", markersize=5,linewidth=2,label="SER_trained_at_10dB SNR")
# # semilogy(lin_space, err4 ,color='purple',  marker="o", markersize=5,linewidth=2,label="SER_trained_at_15dB SNR")
# semilogy(corruption_space, [err1[1],err2[1],err3[1],err4[1],err5[1],err6[1]]/np.sum([err1[1],err2[1],err3[1],err4[1],err5[1],err6[1]]) ,color='r',  marker="^", markersize=5,linewidth=1,label="SNR at 2dB")
# semilogy(corruption_space, [err1[2],err2[2],err3[2],err4[2],err5[2],err6[2]]/np.sum([err1[2],err2[2],err3[2],err4[2],err5[2],err6[2]]) ,color='g',  marker="s", markersize=5,linewidth=1,label="SNR at 4dB")
# semilogy(corruption_space, [err1[3],err2[3],err3[3],err4[3],err5[3],err6[3]]/np.sum([err1[3],err2[3],err3[3],err4[3],err5[3],err6[3]]) ,color='black',  marker="o", markersize=5,linewidth=1,label="SNR at 6dB")
# semilogy(corruption_space, [err1[4],err2[4],err3[4],err4[4],err5[4],err6[4]]/np.sum([err1[4],err2[4],err3[4],err4[4],err5[4],err6[4]]) ,color='b',  marker=".", markersize=5,linewidth=1,label="SNR at 8dB")

semilogy(corruption_space, [err1[0],err2[0],err3[0],err4[0],err5[0],err6[0]] ,color='r',  marker="^", markersize=5,linewidth=1,label="SNR at 2dB")
semilogy(corruption_space, [err1[2],err2[2],err3[2],err4[2],err5[2],err6[2]] ,color='g',  marker="s", markersize=5,linewidth=1,label="SNR at 4dB")
semilogy(corruption_space, [err1[4],err2[4],err3[4],err4[4],err5[4],err6[4]] ,color='black',  marker="o", markersize=5,linewidth=1,label="SNR at 6dB")
semilogy(corruption_space, [err1[6],err2[6],err3[6],err4[6],err5[6],err6[6]] ,color='b',  marker=".", markersize=5,linewidth=1,label="SNR at 8dB")
#semilogy(corruption_space, [err1_3[5],err2_3[5],err3_3[5],err4_3[5],err5_3[5],err6_3[5],err7_3[5],err8_3[5]] ,color='g', ls='dashed', marker="^", markersize=5,linewidth=1,label="L1")
# semilogy(corruption_space, [np.mean(err1),np.mean(err2),np.mean(err3),np.mean(err4),np.mean(err5),np.mean(err6),np.mean(err7),np.mean(err8)] ,color='black',  marker="^", markersize=5,linewidth=1,label="L4")
# semilogy(corruption_space, [np.mean(err1_1),np.mean(err2_1),np.mean(err3_1),np.mean(err4_1),np.mean(err5_1),np.mean(err6_1),np.mean(err7_1),np.mean(err8_1)] ,color='red', ls='dashed', marker="o", markersize=5,linewidth=1,label="L3")
# semilogy(corruption_space, [np.mean(err1_2),np.mean(err2_2),np.mean(err3_2),np.mean(err4_2),np.mean(err5_2),np.mean(err6_2),np.mean(err7_2),np.mean(err8_2),] ,color='b', ls='dashed', marker="s", markersize=5,linewidth=1,label="L2")

ylabel('BER (bit error rate)')
xlabel('Corruption level (N0/Eb) [dB]')
ylim(ymin=0.0001)
grid(which='minor')
grid(which='major')
legend = legend(frameon=True,fontsize=10)
frame = legend.get_frame()
frame.set_facecolor('white')
plt.savefig('final_corruption_plot.eps', format='eps', dpi=300)
show()

# figure()
# ser0 = np.loadtxt("./dictionarylearning/SER_trained_at_6dB SNR_L4_batchnorm")
# semilogy(lin_space, ser0 ,color='blue',  marker="^", markersize=5,linewidth=2,label="SER_trained_at_2dB SNR_batnorm")
# legend()
# grid(which='minor')
# grid(which='major')
# show()